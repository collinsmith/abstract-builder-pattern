{
  "name": "Abstract Builder Pattern",
  "tagline": "",
  "body": "# Java Abstraction of the Builder Pattern\r\n[![Build Status](https://travis-ci.org/collinsmith/abstract-builder-pattern.png)](https://travis-ci.org/collinsmith/abstract-builder-pattern)\r\n\r\nThis repository contains my attempt at abstracting the [builder design pattern]\r\n(https://en.wikipedia.org/wiki/Builder_pattern). As a fairly common implementor of the builder\r\ndesign pattern, I wanted to try and abstract it to remove at least some of the repetitive and\r\noften verbose code it entails. In many regards, I would consider this a success, in that I was able\r\nto abstract at least some of the builder pattern implementation process, however it is still fairly\r\nverbose. That being said, abstracting the builder pattern may have its uses, as implementations\r\ncould actually be polymorphic in nature (e.g., similar to how some libraries allow StringBuilder\r\ninstances where String instances are also accepted), however this was not apart of the design\r\nprocess.\r\n\r\nOne major drawback is that there does not currently seem to be support at the language level for\r\ndynamically inherited static methods, such as a method to automatically create a builder generator\r\nspecific to a class. This use-case could be accomplished in other languages, such as C/C++ using\r\nparameterized macro definitions, however for the time being a static method within the Buildable\r\ninterface is provided to retrieve Builder instances for a class, and a static utility method to\r\ncall that static method with arguments specific to the implementing class is a fair workaround.\r\n\r\nFor example implementations, see:\r\n- [Person](../master/examples/com/gmail/collinsmith70/builder/Person.java)\r\n- [BuildableLinkedList](../master/test/src/com/gmail/collinsmith70/builder/BuildableLinkedList.java)",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}